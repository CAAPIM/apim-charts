nameOverride: ""
fullnameOverride: ""
global:
  schedulerName:

# Use set file to place a Gateway license here
license:
  value:
  accept: false
  # existingSecretName: ssg-license

image:
  registry: docker.io
  repository: caapim/gateway
  tag: 10.1.00
  pullPolicy: IfNotPresent

# Set this if you would like to add an image pull secret directly to the Gateway deployment
# Alternatively, leave this disabled and reference a service account that has the image pull secret associated with it.
imagePullSecret:
  enabled: false
  # existingSecretName: private-registry-secret
  username:
  password:

# Add initContainers to the Gateway
initContainers: {}
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##

## Add sidecars to the Gateway Deployment.
sidecars: {}
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##

serviceAccount:
  # name:
  create: true

# Number of Gateways to deploy
replicas: 1
# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Cluster Hostname
clusterHostname: my.localdomain

## Reference an existing secret for sensitive Gateway fields
## Note that additionalSecret will no longer take effect when existingGatewaySecret is true.

# existingGatewaySecretName: ssg-secret

## The folllowing must be included
  # SSG_ADMIN_USERNAME
  # SSG_ADMIN_PASSWORD
  # SSG_CLUSTER_PASSWORD
## If using a Database
  # SSG_DATABASE_USER
  # SSG_DATABASE_PASSWORD

# Cluster Password
clusterPassword: mypassword

# This enables/disables Policy Manager Access and sets the SSG_ADMIN username and password
# Credentials will be moved to a secret object in the next push..
management:
  enabled: true
  # Enable Restman, if DBbacked this setting will persist until manually deleted via Policy Manager.
  restman:
    enabled: false
  # This is the username/password used for Policy Manager/Gateway Management.
  username: admin
  password: mypassword
  # This optionally loads the Kubernetes Service Account token as a secure password for use in Policy.
  kubernetes:
    loadServiceAccountToken: false

# Database configuration
database:
  # DB Backed or ephemeral
  enabled: true
  # A MySQL Database is configured with this Chart, set to false and set jdbcURL to use your own DB server
  create: true
  # jdbcURL: jdbc:mysql://<host>:<port>/<database> | jdbc:mysql://<host>:<port>,<host>:<port>/<database>,...
  # Configurable, update the mysql.auth.<settings> if you change this and would like to use the demo database server.
  username: gateway
  password: mypassword
  name: ssg

## If loading a TLS Key/Pair
# This key will become the default ssl key. Can only have one.
# use with helm command: --set-file tls.key=/path/to/ssl.p12 --set tls.pass=keypass
## Reference an existing secret for the Gateway Private Key, the secret needs to contain the following.
  # SSG_SSL_KEY - decoded value needs to be base64 encoded. (cat ssl.p12 | base64 --wrap=0)
  # SSG_SSL_KEY_PASS
tls:
  useSignedCertificates: false
  # existingSecretName: ssg-tls
# It is not recommendeded to load private keys in values.yaml, use an existingTlsSecret.
  key:
  pass:

## Demo - enable/disable the background metrics processing task
## Enabling this creates a policy on the Gateway and routes service metrics to influxDbUrl
## Disabling on upgrade will have no effect on the deployed policy
## To be replaced with a user defined bundle relevant to the endpoint they wish to relay service metrics to.
## InfluxDbUrl and tags are Cluster-Wide-Properties.
serviceMetrics:
  enabled: false
  ## By default influxdb is not deployed with this Chart.
  ## Set influxdb.enabled in the subchart section to true to deploy it.
  external: false
  influxDbUrl: http://influxdb:8086
  influxDbDatabase: serviceMetricsDb
  tags: env=dev

config:
  heapSize: "2g"
  javaArgs:
    - -Dcom.l7tech.bootstrap.autoTrustSslKey=trustAnchor,TrustedFor.SSL,TrustedFor.SAML_ISSUER
    - -Dcom.l7tech.server.audit.message.saveToInternal=false
    - -Dcom.l7tech.server.audit.admin.saveToInternal=false
    - -Dcom.l7tech.server.audit.system.saveToInternal=false
    - -Dcom.l7tech.server.audit.log.format=json
    - -Djava.util.logging.config.file=/opt/SecureSpan/Gateway/node/default/etc/conf/log-override.properties
    - -Dcom.l7tech.server.pkix.useDefaultTrustAnchors=true
    - -Dcom.l7tech.security.ssl.hostAllowWildcard=true
  log:
    override: true
    properties: |-
      handlers = com.l7tech.server.log.GatewayRootLoggingHandler, com.l7tech.server.log.ConsoleMessageSink$L7ConsoleHandler
      com.l7tech.server.log.GatewayRootLoggingHandler.formatter = com.l7tech.util.JsonLogFormatter
      java.util.logging.SimpleFormatter.format=
      com.l7tech.server.log.ConsoleMessageSink$L7ConsoleHandler.formatter = com.l7tech.util.JsonLogFormatter
      com.l7tech.server.log.ConsoleMessageSink$L7ConsoleHandler.level = CONFIG
  cwp:
    enabled: false
    properties:
      - name: io.httpsHostAllowWildcard
        value: true
      - name: log.levels
        value: |
          com.l7tech.level = CONFIG
          com.l7tech.server.policy.variable.ServerVariables.level = SEVERE
          com.l7tech.external.assertions.odata.server.producer.jdbc.GenerateSqlQuery.level = SEVERE
          com.l7tech.server.policy.assertion.ServerSetVariableAssertion.level = SEVERE
          com.l7tech.external.assertions.comparison.server.ServerComparisonAssertion = SEVERE
      - name: audit.setDetailLevel.FINE
        value: 152 7101 7103 9648 9645 7026 7027 4155 150 4716 4114 6306 4100 9655 150 151 11000 4104
  systemProperties: |-
    # By default, FIPS module will block an RSA modulus from being used for encryption if it has been used for
    # signing, or visa-versa. Set true to disable this default behaviour and remain backwards compatible.
    com.safelogic.cryptocomply.rsa.allow_multi_use=true
    # Specifies the type of Trust Store (JKS/PKCS12) provided by AdoptOpenJDK that is used by Gateway.
    # Must be set correctly when Gateway is running in FIPS mode. If not specified it will default to PKCS12.
    javax.net.ssl.trustStoreType=jks
    # Additional properties go here

# Install Gateway solution kit(s) using restman.
#   Prerequisites:
#     1) restman is enabled
#     2) .sskar file(s) exist on Gateway container image under /tmp (e.g. /tmp/OAuthSolutionKit-4.4.1-4425.sskar)
#   Description of solution kit(s):
#     1) OAuth Solution Kit: https://techdocs.broadcom.com/content/broadcom/techdocs/us/en/ca-enterprise-software/layer7-api-management/api-management-oauth-toolkit/4-4/installation-workflow/install-the-oauth-solution-kit.html
installSolutionKits:
  enabled: false
  restmanPort: 8443
  restmanReadyWait: 150s
  solutionKits:

# Additional Environment variables to be added to the Gateway Configmap
additionalEnv: {}
# key1: value
# key2: value

# Additional Secret variables to be added to the Gateway Secret
additionalSecret: {}
# key1: value
# key2: value

# This mounts a bundle folder to the Gateway. This requires you to clone the chart repo and populate the bundle folder.
# Note that there is a 1MB limit for Configmaps/Secrets so if your bundles exceed that total, the Chart will fail to install/upgrade.
# Helm also keeps a revision of each deployment that will include the bundle definition, if that exceeds 1MB then the same error will occur.
# We recommend using the existingBundle configuration below. This allows you to manage Gateway Deployment Config and Services separately.
bundle:
  enabled: false
  path: "bundles/*.bundle"

# This mounts one or more bundles that exist as secrets or configmaps in your Kubernetes Cluster.
# When creating these secrets/configmaps the format should be
# key: bundle1.bundle value: <xml value>
# Each bundle that you create as a ConfigMap can not exceed 1MB in size.

# Bundles that contain sensitive information can be mounted using the Kubernetes CSI Driver
existingBundle:
  enabled: false
  configMaps: []
 # - name: mybundle1
    # configMap:
    #   defaultMode: 420
    #   optional: false
    #   name: mybundle1
 # - name: mybundle2
  secrets: []
  # - name: mysecretbundle1
  #   csi:
  #     driver: secrets-store.csi.k8s.io
  #     readOnly: true
  #     volumeAttributes:
  #       secretProviderClass: "secret-provider-class-name"
 # - mysecretbundle2

# Configure custom hosts
customHosts:
  enabled: false
  hostAliases: []
  # - hostnames:
  #   - "dev.ca.com"
  #   - "dev1.ca.com"
  #   ip: "0.0.0.0"
  # - hostnames:
  #   - "example.ca.com"
  #   ip: "0.0.0.0"

service:
  # Service Type, ClusterIP, NodePort, LoadBalancer
  type: LoadBalancer
  ## Load Balancer sources
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ##
  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

  ## Set the ExternalIPs
  ##
  # externalIPs:

  ## Set the LoadBalancerIP
  ##
  # loadBalancerIP:

  # Update this port list if additional ports need to be exposed
  ports:
    - name: https
      internal: 8443
      external: 8443
    - name: management
      internal: 9443
      external: 9443
  # Additional Service annotations, the example below shows configuration for an internal load balancer on GCP
  # See the docs for more ==> https://kubernetes.io/docs/concepts/services-networking/service/
  annotations: {}
    # cloud.google.com/load-balancer-type: "Internal"

  # Uncomment the following section to enable session affinity
  # sessionAffinity: ClientIP
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800

# This project does not currently support Google's GCE controller.
# The default way to expose the Gateway is via L4 Load Balancer because it goes far beyond the HTTP(S) limitation ingress currently imposes
# Certificates are not created here, please specify an existing cert secret to use if enabling TLS
ingress:
  # Set to true to create ingress object
  enabled: false
  # Ingress annotations
  annotations:
  # Ingress class
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
  # When the ingress is enabled, a host pointing to this will be created
  # By default clusterHostname is used, only set this if you want to use a different host
   ## Enable TLS configuration for the hostname defined at ingress.hostname/clusterHostname parameter

  # TLS Secret Name - this must present in your Kubernetes Cluster.
  secretName: tls-secret
  # Array of Hostnames that the certificate is valid for - must contain at least one.
  hostname: dev.ca.com
  tlsHostnames: []
  # - dev.ca.com
  # - dev1.ca.com
  ## The port that you want to route to via ingress. This needs to be available via service.ports.
  port: 8443
  ## Define additional hostnames and ports as key-value pairs.
  additionalHostnamesAndPorts: {}
  #  dev1.ca.com: 9443

livenessProbe:
  enabled: true
  type: command
  command: /opt/docker/rc.d/diagnostic/health_check.sh

# type: httpGet
# path: /ssg/ping
# port: 8443
# scheme: HTTPS
  initialDelaySeconds: 40
  timeoutSeconds: 1
  periodSeconds: 15
  successThreshold: 1
  failureThreshold: 15

readinessProbe:
  enabled: true
  type: command
  command: /opt/docker/rc.d/diagnostic/health_check.sh

# type: httpGet
# path: /ssg/ping
# port: 8443
# scheme: HTTPS
  initialDelaySeconds: 40
  timeoutSeconds: 1
  periodSeconds: 15
  successThreshold: 1
  failureThreshold: 15

resources:
  # There are no resource limits set by default, this is a consicious choice for the user and
  # increases the chance of these running on environments with fewer resources available
  # Remove the curly braces and uncomment cpu/memory to set.
  limits: {}
  #   cpu: 2000m
  #   memory: 4Gi
  requests: {}
  #   cpu: 2000m
  #   memory: 4Gi

# nodeSelector: {}
# affinity: {}

##
## Subchart Configuration
##

# MySQL Bitnami chart - https://github.com/bitnami/charts/tree/master/bitnami/mysql (DO NOT USE IN PRODUCTION!!)
mysql:
  image:
    tag: "8.0.22-debian-10-r75"
  auth:
    username: gateway
    password: mypassword
    database: ssg
    rootPassword: mypassword
  primary:
    # persistence:
    #   enabled: true
    #   size: 8Gi
    configuration: |-
      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/plugin
      [mysqld]
      default_authentication_plugin=mysql_native_password
      log-bin-trust-function-creators=1
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      collation-server=utf8_general_ci
      character-set-server=UTF8
      innodb_log_buffer_size=32M
      innodb_log_file_size=80M
      max_allowed_packet=20M
      sql_mode = "STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION"
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

# Settings for Hazelcast - https://github.com/hazelcast/charts/blob/master/stable/hazelcast/values.yaml
# The Gateway currently supports Hazelcast 4.x & 5.x servers
hazelcast:
  # If you wish to connect to an existing Hazelcast instance set enabled to false
  # external to true, and uncomment and set url.
  enabled: false
  external: false
  # url: hazelcast.example.com:5701
  image:
    tag: "5.1.1"
  cluster:
    memberCount: 2
  mancenter:
    enabled: false
  hazelcast:
    yaml:
      hazelcast:
        network:
          join:
            multicast:
              enabled: false
            kubernetes:
              enabled: true
              service-name: ${serviceName}
              namespace: ${namespace}
              resolve-not-ready-addresses: true

# Settings for InfluxDB - https://github.com/influxdata/helm-charts/tree/master/charts/influxdb
# This is not a production implementation!
influxdb:
  enabled: false
  service:
    port: 8086
  persistence:
    enabled: true
   # storageClass:
    size: 8Gi
  env:
    - name: INFLUXDB_DB
      value: "serviceMetricsDb"

# Settings for Grafana - https://github.com/bitnami/charts/tree/master/bitnami/grafana
grafana:
  enabled: false
  # Change this to update the UI Password
  admin:
    user: admin
    password: password
  dashboardsProvider:
    enabled: true
  customDashboard:
    value:
  dashboardsConfigMaps:
    - configMapName: grafana-configmap
      fileName: gateway-service-metrics.json
  datasources:
    secretName: grafana-secret
