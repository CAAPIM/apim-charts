nameOverride: ""
fullnameOverride: ""

# Use set file to place a Gateway license here
license:
  value:
  accept: false

image:
  registry: docker.io
  repository: caapim/gateway
  tag: 10.0.00
  pullPolicy: Always
  # Will create a Registry secret and apply it to the Gateway
  secretName:
  credentials:
   username:
   password:
   email:

# Number of Edge Gateways to deploy
replicas: 1
# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Cluster Hostname
clusterHostname: my.localdomain

# Cluster Password
clusterPassword: mypassword

# This enables/disables Policy Manager Access and sets the SSG_ADMIN username and password
# Credentials will be moved to a secret object in the next push..
management:
  enabled: true
  # Enable Restman, if DBbacked this setting will persist until manually deleted via Policy Manager.
  restman:
    enabled: true
  username: admin
  password: mypassword

# Database configuration
database:
  # DB Backed or ephemeral
  enabled: true
  # A MySQL Database is configured with this Chart, set to false and set jdbcURL to use your own DB server
  create: true
  # jdbcURL: jdbc:mysql://<host>:<port>/<database> | jdbc:mysql://<host>:<port>,<host>:<port>/<database>,...
  # Configurable, update the mysql.<settings> if you change this
  username: gateway
  password: mypassword
  name: ssg

## Beta - enable/disable the background metrics processing task
## Enabling this creates a policy on the Gateway and routes service metrics to influxDbUrl
## Disabling on upgrade will have no effect on the deployed policy
## To be replaced with a user defined bundle relevant to the endpoint they wish to relay service metrics to.
## InfluxDbUrl and tags are Cluster-Wide-Properties.
serviceMetrics:
  enabled: false
  ## By default influxdb is not deployed with this Chart.
  ## Set influxdb.enabled in the subchart section to true to deploy it.
  external: false
  influxDbUrl: http://influxdb:8086
  influxDbDatabase: serviceMetricsDb
  tags: env=dev

config:
  heapSize: "3g"
  javaArgs:
    - -Dcom.l7tech.bootstrap.autoTrustSslKey=trustAnchor,TrustedFor.SSL,TrustedFor.SAML_ISSUER
    - -Dcom.l7tech.server.audit.message.saveToInternal=false
    - -Dcom.l7tech.server.audit.admin.saveToInternal=false
    - -Dcom.l7tech.server.audit.system.saveToInternal=false
    - -Dcom.l7tech.server.audit.log.format=json
    - -Dcom.l7tech.logging.debug=true
    - -Djava.util.logging.config.file=/opt/SecureSpan/Gateway/node/default/etc/conf/log-override.properties
    - -Dcom.l7tech.server.pkix.useDefaultTrustAnchors=true
    - -Dcom.l7tech.security.ssl.hostAllowWildcard=true
  log:
    override: true
    properties: |-
      handlers = com.l7tech.server.log.GatewayRootLoggingHandler
      com.l7tech.server.log.GatewayRootLoggingHandler.formatter = com.l7tech.util.ConfigurableLogFormatter
      com.l7tech.server.log.GatewayRootLoggingHandler.formatter.format = %1$tY-%1$tm-%1$tdT%1$tH:%1$tM:%1$tS.%1$tL%1$tz %2$-7s %5$d %3$s: %4$s%n
      java.util.logging.FileHandler.formatter = com.l7tech.util.ConfigurableLogFormatter
      java.util.logging.FileHandler.formatter.format = %1$tY-%1$tm-%1$tdT%1$tH:%1$tM:%1$tS.%1$tL%1$tz %2$-7s %5$d %3$s: %4$s%n
tls:
  customKey:
    enabled: false

  # when enabled, the pass cannot be empty. key value needs to be base64 encoded .p12
  # This key will become the default ssl key. Can only have one.
  # ex. DEMO_KEY=`cat demo-key.p12 | base64 --wrap=0`
  # use with helm command: --set "tls.customDefaultSslKey.key=$DEMO_KEY"
  customDefaultSslKey:
    enabled: false
    key:
    pass: mypassword
otk:
  cassandra:
    strategy: 'SimpleStrategy'
    replicationFactor: 1
upgradeSolutionKits:
  enabled: true
  solutionKitId: a6f9bbee-87c2-43d8-b613-5c072f7b6f7d
  file: OAuthSolutionKit-4.6.0-6324.sskar
  param: --form solutionKitSelectByName="OTK Assertions" --form solutionKitSelectByName="Shared OAuth Resources"
installSolutionKits:
  enabled: false 
  restmanPort: 8443
  restmanReadyWaitInterval: 30s
  restmanReadyWaitMaxAttempt: 10

  # OTK JDBC connection
  otkJdbcEnabled: false 
  otkJdbcDriver: com.mysql.jdbc.Driver
  #   - WARNING 1: MySQL deployed by this example is for DEVELOPMENT ONLY OTK database.
  #                For production, an EXTERNALLY managed PERSISTENT deployment is recommended (along with using non-ROOT database/JDBC user).
  #   - WARNING 2: jdbc url, user & password are also configured elsewhere, search "preInstallCommand: java -jar /tmp/otk-db-liquibase/liquibase"
  #   - The host part of jdbc url in this example is determined by the release name used to install. E.g. for "helm install ssg-otk ..." use "ssg-otk-mysql"
  otkJdbcUrl: jdbc:mysql://ssg-base-select-otk-mysql:3306/otk_db
  otkJdbcUser: gateway
  otkJdbcPassword: mypassword

  solutionKits:
    # 1: OTK Base Selection
    #   https://techdocs.broadcom.com/content/broadcom/techdocs/us/en/ca-enterprise-software/layer7-api-management/api-management-oauth-toolkit/4-4/installation-workflow/install-the-oauth-solution-kit.html
    #     Prerequisite:
    #       1) set bundle.enabled in (this file) to true (this is to generate the JDBC connection on the Gateway to the OTK MySQL database)
    #       2) separate install of some OTK sub-solution kits to avoid bug that requires Gateway restart (recommendation from OTK engineering team)
    #       3) Liquibase files to create OTK database schema (/tmp/otk-db-liquibase/)
    - otkBaseSelect1:
      file: OAuthSolutionKit-4.5.1-5323.sskar
      # solutionKitID: b74b063c-5151-4f7d-b4db-71f032cc2d46
      param: --form solutionKitSelectByName="OTK Assertions"
    - otkBaseSelect2:
      file: OAuthSolutionKit-4.5.1-5323.sskar
      # solutionKitID: 1f5dcaea-94a9-4bf7-8c9c-5a49be1a6001
      param: --form solutionKitSelectByName="Shared OAuth Resources"

#Additional Environment variables to be added to the Gateway Configmap
additionalEnv:
  key1: value

# key1: value
# key2: value

#Additional Secret variables to be added to the Gateway Secret
additionalSecret:
  key1: value

# key1: value
# key2: value

# This mounts a bundle folder to the Gateway.
bundle:
  enabled: true
  path: "bundles/jdbc-connection-oauth.bundle"

service:
  # Service Type, ClusterIP, NodePort, LoadBalancer
  type: LoadBalancer
  ## Load Balancer sources
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ##
  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

  ## Set the ExternalIPs
  ##
  # externalIPs:

  ## Set the LoadBalancerIP
  ##
  # loadBalancerIP:

  # Update this port list if additional ports need to be exposed
  ports:
    - name: https
      internal: 8443
      external: 8443
    - name: management
      internal: 9443
      external: 9443
  # Additional Service annotations, the example below shows configuration for an internal load balancer on GCP
  # See the docs for more ==> https://kubernetes.io/docs/concepts/services-networking/service/
  annotations: {}
#    cloud.google.com/load-balancer-type: "Internal"

# This project does not currently support Google's GCE controller.
# The default way to expose the Gateway is via L4 Load Balancer because it goes far beyond the HTTP(S) limitation ingress currently imposes
# Certificates are not created here, please specify an existing cert secret to use if enabling TLS
ingress:
  # Set to true to create ingress object
  enabled: false
  class: nginx
  # Ingress annotations
  annotations:
  # Ingress class
  #  nginx.ingress.kubernetes.io/ssl-passthrough: "true"

  # When the ingress is enabled, a host pointing to this will be created
  # By default clusterHostname is used, only set this if you want to use a different host
  hostname:
  ## The port that you want to route to via ingress. This needs to be available via service.ports.
  port: https
  ## Enable TLS configuration for the hostname defined at ingress.hostname/clusterHostname parameter
  tls: false
  secretName:

  #Need to configure additional ingress options for hosts/tls

livenessProbe:
  enabled: true 
  initialDelaySeconds: 90
  timeoutSeconds: 1
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 10

readinessProbe:
  enabled: true 
  initialDelaySeconds: 90
  timeoutSeconds: 1
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 10

resources:
  # There are no resource limits set by default, this is a consicious choice for the user and
  # increases the chance of these running on environments with fewer resources available
  # Remove the curly braces and uncomment cpu/memory to set.
  limits: {}
  #   cpu: 1000m
  #   memory: 2Gi
  requests: {}
  #   cpu: 1000m
  #   memory: 2Gi

serviceAccount:
  #name:
  create: true

###############################################################################################
##                                                                                           ##
##                              Subchart Configuration                                       ##
##                                                                                           ##
###############################################################################################

# MySQL stable chart - this is not scalable nor will be in this format.
mysql:
  imageTag: "8"
  imagePullSecrets: 
     - name: docker-cred
  mysqlUser: gateway
  mysqlPassword: mypassword
  mysqlDatabase: ssg
  mysqlRootPassword: mypassword
  requests:
    cpu: 1000m
    memory: 2Gi
  persistence:
    enabled: true
    size: 8Gi
    #storageClass:

  configurationFiles:
    my.cnf: |-
      [mysqld]
      character-set-server = utf8
      innodb_log_buffer_size = 32M
      innodb_log_file_size = 80M
      max_allowed_packet = 20M
      default-authentication-plugin=mysql_native_password
      log-bin-trust-function-creators=1


# Settings for Hazelcast - https://github.com/hazelcast/charts/blob/master/stable/hazelcast/values.yaml
# The Gateway currently supports Hazelcast 3.x servers
hazelcast:
  # If you wish to connect to an existing Hazelcast instance set enabled to false
  # external to true, and uncomment and set url.
  enabled: false
  external: false
  #url: hazelcast.example.com:5701
  image:
    tag: "3.12.8"
  cluster:
    memberCount: 2
  mancenter:
    enabled: false
  hazelcast:
    yaml:
      hazelcast:
        network:
          join:
            multicast:
              enabled: false
            kubernetes:
              enabled: true
              service-name: ${serviceName}
              namespace: ${namespace}
              resolve-not-ready-addresses: true

# Settings for InfluxDB - https://github.com/influxdata/helm-charts/tree/master/charts/influxdb
# This is not a production implementation!
influxdb:
  enabled: false
  service:
    port: 8086
  persistence:
    enabled: true
   # storageClass:
    size: 8Gi
  env:
    - name: INFLUXDB_DB
      value: "serviceMetricsDb"

# Settings for Grafana - https://github.com/bitnami/charts/tree/master/bitnami/grafana
grafana:
  enabled: false
  # Change this to update the UI Password
  admin:
    user: admin
    password: password
  dashboardsProvider:
    enabled: true
  dashboardsConfigMaps:
    - configMapName: grafana-configmap
      fileName: gateway-service-metrics.json
  datasources:
    secretName: grafana-secret
cassandra:
  enabled: false
  image:
    tag: "2.2.19"
  dbUser:
    user: admin
    password: password
  initDBConfigMap: cassandra-configmap
  persistence:
    enabled: false
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
       cpu: 1200m
       memory: 4Gi
    requests:
       cpu: 200m
       memory: 3Gi
